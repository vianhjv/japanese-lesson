/* --- SCRIPT CHO C√ÅC B√ÄI H·ªåC KAIWA TI·∫æNG NH·∫¨T (PHI√äN B·∫¢N S·ª¨A L·ªñI TO√ÄN DI·ªÜN) --- */

document.addEventListener('DOMContentLoaded', () => {

    // === PH·∫¶N 0: B·ªò QU·∫¢N L√ù GI·ªåNG ƒê·ªåC (·ªîN ƒê·ªäNH H∆†N) ===
    const voiceManager = {
        japaneseVoices: [],
        characterMap: {},
        defaultVoice: null,
        voicesLoaded: false,
        preferences: { 'an': 'nanami', 'suzuki': 'haruka', 'yamada': 'ichiro', 'tanaka': 'keita' },

        // H√†m kh·ªüi t·∫°o, s·∫Ω ƒë∆∞·ª£c g·ªçi khi trang t·∫£i xong
        init: function() {
            // API getVoices() c·∫ßn m·ªôt ch√∫t th·ªùi gian ƒë·ªÉ t·∫£i.
            // S·ª± ki·ªán 'onvoiceschanged' s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t khi danh s√°ch gi·ªçng ƒë·ªçc s·∫µn s√†ng.
            if (speechSynthesis.onvoiceschanged !== undefined) {
                speechSynthesis.onvoiceschanged = () => this.loadVoices();
            }
            // G·ªçi loadVoices() ngay l·∫≠p t·ª©c ph√≤ng tr∆∞·ªùng h·ª£p s·ª± ki·ªán kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t
            this.loadVoices(); 
        },

        loadVoices: function() {
            if (this.voicesLoaded) return;
            
            this.japaneseVoices = speechSynthesis.getVoices().filter(v => v.lang.startsWith('ja'));
            
            if (this.japaneseVoices.length === 0) {
                console.warn("Kh√¥ng t√¨m th·∫•y gi·ªçng ƒë·ªçc ti·∫øng Nh·∫≠t n√†o tr√™n tr√¨nh duy·ªát n√†y. Ch·ª©c nƒÉng ƒë·ªçc s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.");
                // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
                const displayWindow = document.querySelector('.dialogue-display-window');
                if (displayWindow) {
                    displayWindow.innerHTML = `<p style="color: red; text-align: center;">L·ªói: Kh√¥ng t√¨m th·∫•y gi·ªçng ƒë·ªçc ti·∫øng Nh·∫≠t tr√™n tr√¨nh duy·ªát c·ªßa b·∫°n. Vui l√≤ng th·ª≠ tr√™n tr√¨nh duy·ªát kh√°c nh∆∞ Chrome ho·∫∑c Edge tr√™n m√°y t√≠nh.</p>`;
                }
                return;
            }
            
            console.log("C√°c gi·ªçng ƒë·ªçc ti·∫øng Nh·∫≠t ƒë√£ t√¨m th·∫•y:", this.japaneseVoices);
            this.defaultVoice = this.japaneseVoices[0];

            // Logic t√¨m v√† g√°n gi·ªçng ƒë·ªçc cho nh√¢n v·∫≠t (gi·ªØ nguy√™n)
            const found = {};
            this.japaneseVoices.forEach(v => {
                const name = v.name.toLowerCase();
                for (const [key, kw] of Object.entries(this.preferences)) { if (name.includes(kw)) found[kw] = v; }
            });
            const female = this.japaneseVoices.filter(v => /nanami|haruka|ayumi/i.test(v.name));
            const male = this.japaneseVoices.filter(v => /ichiro|keita|kenji/i.test(v.name));
            const assign = (char, gender, idx) => found[this.preferences[char]] || (gender.length > 0 ? gender[idx % gender.length] : this.defaultVoice);
            this.characterMap = {
                'an': assign('an', female, 0), 'suzuki': assign('suzuki', female, 1),
                'yamada': assign('yamada', male, 0), 'tanaka': assign('tanaka', male, 1)
            };
            
            this.voicesLoaded = true;
            // K√≠ch ho·∫°t l·∫°i vi·ªác g√°n s·ª± ki·ªán click cho n√∫t play sau khi ƒë√£ c√≥ gi·ªçng ƒë·ªçc
            if (typeof activateSpeechForCurrentLine === 'function') activateSpeechForCurrentLine();
        },

        getVoiceFor: function(charName) {
            // N·∫øu gi·ªçng ƒë·ªçc ch∆∞a s·∫µn s√†ng, th·ª≠ t·∫£i l·∫°i
            if (!this.voicesLoaded) this.loadVoices();
            return this.characterMap[charName] || this.defaultVoice;
        }
    };
    
    // Kh·ªüi t·∫°o b·ªô qu·∫£n l√Ω gi·ªçng ƒë·ªçc ngay khi DOM s·∫µn s√†ng
    voiceManager.init();


    // === PH·∫¶N 1: B·ªò M√ÅY ƒê·ªåC (ƒê√É S·ª¨A L·ªñI TRI·ªÜT ƒê·ªÇ) ===

// === PH·∫¶N 1: B·ªò M√ÅY ƒê·ªåC (N√ÇNG C·∫§P V·ªöI HIGHLIGHT) ===
    let currentSpeechUtterance = null; // Qu·∫£n l√Ω utterance hi·ªán t·∫°i ƒë·ªÉ c√≥ th·ªÉ d·ª´ng

    function createSpeechHandler(targetElement, characterName) {
        // Bi·∫øn ƒë·ªÉ l∆∞u tr·∫°ng th√°i g·ªëc v√† c√°c th·∫ª span ƒë·ªÉ highlight
        const originalHTML = targetElement.innerHTML;
        let charMap = [];
        let plainText = '';

        // H√†m d·ªçn d·∫πp, tr·∫£ l·∫°i HTML g·ªëc sau khi ƒë·ªçc xong ho·∫∑c d·ª´ng
        function cleanup() {
            targetElement.innerHTML = originalHTML;
            const btn = displayWindow.querySelector('.dialogue-play-btn');
            if (btn) btn.innerHTML = 'üîä';
        }

        // [M·ªöI] B·ªçc t·ª´ng k√Ω t·ª± trong th·∫ª <span> ƒë·ªÉ chu·∫©n b·ªã highlight
        function prepareForSpeech() {
            plainText = '';
            charMap = [];

            function wrapCharsInSpans(parentNode) {
                const nodes = Array.from(parentNode.childNodes);
                for (const node of nodes) {
                    // Ch·ªâ x·ª≠ l√Ω c√°c node text kh√¥ng n·∫±m trong th·∫ª RT (furigana)
                    if (node.nodeType === 3 && node.parentNode.nodeName !== 'RT') {
                        const text = node.textContent;
                        const fragment = document.createDocumentFragment();
                        for (const char of text) {
                            plainText += char;
                            const span = document.createElement('span');
                            span.textContent = char;
                            fragment.appendChild(span);
                            charMap.push(span);
                        }
                        parentNode.replaceChild(fragment, node);
                    } else if (node.nodeType === 1) {
                        wrapCharsInSpans(node); // ƒê·ªá quy v√†o c√°c node element kh√°c
                    }
                }
            }
            wrapCharsInSpans(targetElement);
        }

        // H√†m x·ª≠ l√Ω ch√≠nh khi click n√∫t play
        const handleClick = () => {
            // N·∫øu ƒëang ƒë·ªçc, d·ª´ng l·∫°i v√† d·ªçn d·∫πp
            if (speechSynthesis.speaking) {
                speechSynthesis.cancel(); 
                cleanup(); // D·ªçn d·∫πp ngay l·∫≠p t·ª©c
                return;
            }

            // Chu·∫©n b·ªã vƒÉn b·∫£n v√† c√°c th·∫ª span
            prepareForSpeech();
            
            if (!plainText.trim()) {
                console.error("VƒÉn b·∫£n r·ªóng, kh√¥ng c√≥ g√¨ ƒë·ªÉ ƒë·ªçc.");
                return;
            }

            const voice = voiceManager.getVoiceFor(characterName);
            if (!voice) {
                console.error(`Kh√¥ng t√¨m th·∫•y gi·ªçng ƒë·ªçc cho nh√¢n v·∫≠t ${characterName}.`);
                return;
            }
            
            currentSpeechUtterance = new SpeechSynthesisUtterance(plainText);
            currentSpeechUtterance.lang = 'ja-JP';
            currentSpeechUtterance.rate = 1.0;
            currentSpeechUtterance.voice = voice;
            
            const btn = displayWindow.querySelector('.dialogue-play-btn');
            if (btn) btn.innerHTML = '‚èπÔ∏è';

            // [M·ªöI] S·ª± ki·ªán onboundary ƒë·ªÉ highlight t·ª´ng t·ª´
            currentSpeechUtterance.onboundary = (event) => {
                // X√≥a highlight c≈©
                charMap.forEach(span => span.classList.remove('dialogue-word-highlight'));
                
                // Highlight t·ª´ m·ªõi
                if (event.name === 'word') {
                    for (let i = 0; i < event.charLength; i++) {
                        const charIndex = event.charIndex + i;
                        if (charMap[charIndex]) {
                            charMap[charIndex].classList.add('dialogue-word-highlight');
                        }
                    }
                }
            };

            currentSpeechUtterance.onend = () => {
                cleanup();
                currentSpeechUtterance = null;
            };
            currentSpeechUtterance.onerror = (event) => {
                console.error('SpeechSynthesis Error:', event);
                cleanup();
                currentSpeechUtterance = null;
            };
            
            speechSynthesis.speak(currentSpeechUtterance);
        };
        
        return { play: handleClick };
    }



    // === PH·∫¶N 2: ƒêI·ªÄU KHI·ªÇN H·ªòI THO·∫†I ƒêA C·∫¢NH (C√ì THAY ƒê·ªîI NH·ªé) ===
    const displayWindow = document.querySelector('.dialogue-display-window');
    const scenes = document.querySelectorAll('.dialogue-source .scene');
    const sceneNavContainer = document.getElementById('sceneNav');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const counter = document.getElementById('counter');
    const bgImage = document.querySelector('.scene-background-image');
    
    let currentSceneIndex = 0;
    let currentLineIndex = 0;
    let currentLineHandler = null;

    // H√†m n√†y s·∫Ω g√°n l·∫°i s·ª± ki·ªán click cho n√∫t play c·ªßa d√≤ng tho·∫°i hi·ªán t·∫°i
    window.activateSpeechForCurrentLine = function() {
        const currentPlayBtn = displayWindow.querySelector('.dialogue-play-btn');
        const currentTextElem = displayWindow.querySelector('.japanese-text');
        const currentSpeakerElem = displayWindow.querySelector('.speaker');

        if (currentPlayBtn && currentTextElem && currentSpeakerElem) {
            const charName = currentSpeakerElem.dataset.character;
            currentLineHandler = createSpeechHandler(currentTextElem, charName);
            
            // T·∫°o m·ªôt n√∫t m·ªõi ƒë·ªÉ x√≥a b·ªè c√°c event listener c≈©
            const newBtn = currentPlayBtn.cloneNode(true);
            currentPlayBtn.parentNode.replaceChild(newBtn, currentPlayBtn);
            
            // G√°n s·ª± ki·ªán click duy nh·∫•t
            newBtn.addEventListener('click', currentLineHandler.play);
        }
    }

    function showLine(sceneIdx, lineIdx) {
        // Tr∆∞·ªõc khi hi·ªÉn th·ªã d√≤ng m·ªõi, d·ª´ng b·∫•t k·ª≥ √¢m thanh n√†o ƒëang ph√°t
        speechSynthesis.cancel();

        const scene = scenes[sceneIdx];
        const linesInScene = scene.querySelectorAll('.dialogue-line');
        if (lineIdx >= 0 && lineIdx < linesInScene.length) {
            currentLineIndex = lineIdx;
            
            displayWindow.style.opacity = 0;
            setTimeout(() => {
                displayWindow.innerHTML = linesInScene[lineIdx].innerHTML;
                activateSpeechForCurrentLine(); // K√≠ch ho·∫°t l·∫°i n√∫t play cho d√≤ng m·ªõi
                counter.textContent = `${lineIdx + 1} / ${linesInScene.length}`;
                updateNavButtons();
                displayWindow.style.opacity = 1;
            }, 150);
        }
    }

    function loadScene(sceneIdx) {
        if (sceneIdx >= 0 && sceneIdx < scenes.length) {
            currentSceneIndex = sceneIdx;
            const newBg = scenes[sceneIdx].dataset.backgroundImage;
            if (bgImage.src !== newBg) {
                bgImage.style.opacity = 0;
                setTimeout(() => {
                    bgImage.src = newBg;
                    bgImage.alt = `B·ªëi c·∫£nh c·∫£nh ${sceneIdx + 1}`;
                    bgImage.style.opacity = 1;
                }, 400);
            }
            document.querySelectorAll('.scene-btn').forEach((btn, idx) => {
                btn.classList.toggle('active', idx === sceneIdx);
            });
            showLine(sceneIdx, 0);
        }
    }

    function setupSceneNav() {
        scenes.forEach((scene, index) => {
            const btn = document.createElement('button');
            btn.className = 'scene-btn';
            btn.textContent = scene.dataset.sceneName || `C·∫£nh ${index + 1}`;
            btn.addEventListener('click', () => loadScene(index));
            sceneNavContainer.appendChild(btn);
        });
    }

    function updateNavButtons() {
        const linesInScene = scenes[currentSceneIndex].querySelectorAll('.dialogue-line');
        prevBtn.disabled = (currentLineIndex === 0);
        nextBtn.disabled = (currentLineIndex === linesInScene.length - 1);
    }

    nextBtn.addEventListener('click', () => {
        const linesInScene = scenes[currentSceneIndex].querySelectorAll('.dialogue-line');
        if (currentLineIndex < linesInScene.length - 1) {
            showLine(currentSceneIndex, currentLineIndex + 1);
        }
    });

    prevBtn.addEventListener('click', () => {
        if (currentLineIndex > 0) {
            showLine(currentSceneIndex, currentLineIndex - 1);
        }
    });

    // Kh·ªüi ch·∫°y
    if (scenes.length > 0) {
        setupSceneNav();
        loadScene(0);
    }


    // === PH·∫¶N 3: ƒêI·ªÄU KHI·ªÇN ƒê·ªåC CHO PH·∫¶N T·ª™ V·ª∞NG (C·∫¢I TI·∫æN) ===
    function speakVocab(text, lang = 'ja-JP') {
        speechSynthesis.cancel();
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = lang;
        utterance.rate = 0.9;
        utterance.voice = voiceManager.getVoiceFor('default'); // D√πng gi·ªçng m·∫∑c ƒë·ªãnh
        speechSynthesis.speak(utterance);
    }

    document.querySelectorAll('.vocab-play-btn').forEach(button => {
        button.addEventListener('click', (event) => {
            const textToSpeak = event.currentTarget.dataset.speakText;
            if (textToSpeak) {
                speakVocab(textToSpeak);
            }
        });
    });

    // === PH·∫¶N 4: LOGIC C·ª¶A PH·∫¶N QUIZ (Kh√¥ng ƒë·ªïi) ===
    document.querySelectorAll('.quiz-card').forEach(quizCard => {
        const options = quizCard.querySelectorAll('.option-btn');
        const explanationBox = quizCard.querySelector('.explanation-box');

        options.forEach(option => {
            option.addEventListener('click', () => {
                if (quizCard.classList.contains('answered')) return;
                quizCard.classList.add('answered');

                const isCorrect = option.getAttribute('data-correct') === 'true';
                if (isCorrect) {
                    option.classList.add('correct');
                } else {
                    option.classList.add('incorrect');
                    const correctOption = quizCard.querySelector('[data-correct="true"]');
                    if (correctOption) correctOption.classList.add('correct');
                }
                options.forEach(btn => btn.disabled = true);
                if (explanationBox) explanationBox.style.display = 'block';
            });
        });
    });

// === PH·∫¶N 5: LOGIC CHO PH·∫¶N ƒê·ªåC HI·ªÇU ·ª®NG D·ª§NG (B·ªî SUNG) ===
// === PH·∫¶N 5: LOGIC CHO PH·∫¶N ƒê·ªåC HI·ªÇU ·ª®NG D·ª§NG (N√ÇNG C·∫§P V·ªöI HIGHLIGHT) ===



// =======================================================================
    // === PH·∫¶N 5: B·ªò M√ÅY ƒê·ªåC HI·ªÇU (H·ªåC T·ª™ TEMPLATE M·ªöI) ===
    // =======================================================================

  
// =======================================================================
    // === PH·∫¶N 5: B·ªò M√ÅY ƒê·ªåC HI·ªÇU (PHI√äN B·∫¢N S·ª¨A L·ªñI - B·∫¢O TO√ÄN FURIGANA) ===
    // =======================================================================

    // BI·∫æN TO√ÄN C·ª§C ƒê·ªÇ QU·∫¢N L√ù VI·ªÜC ƒê·ªåC TR√ÅNH XUNG ƒê·ªòT
    let currentSpeechHandler = null; 

    /**
     * "B·ªô n√£o" x·ª≠ l√Ω vi·ªác ƒë·ªçc v√† highlight.
     * N√≥ s·∫Ω t·ª± ƒë·ªông b·ªçc t·ª´ng k√Ω t·ª± trong th·∫ª <span> ƒë·ªÉ t√¥ m√†u M√Ä KH√îNG L√ÄM M·∫§T FURIGANA.
     * @param {HTMLElement} targetElement - Th·∫ª HTML ch·ª©a vƒÉn b·∫£n c·∫ßn ƒë·ªçc.
     * @param {object} options - C√°c t√πy ch·ªçn nh∆∞ t·ªëc ƒë·ªô, callback...
     * @returns {object} - M·ªôt ƒë·ªëi t∆∞·ª£ng ƒëi·ªÅu khi·ªÉn c√≥ c√°c ph∆∞∆°ng th·ª©c play, stop, setSpeed.
     */
    function createSpeechHandlerForPassage(targetElement, options = {}) {
        const originalHTML = targetElement.innerHTML;
        let charMap = [];
        let plainText = '';
        let utterance = null;
        let isPlaying = false;
        let isPaused = false;

        /**
         * [ƒê√É S·ª¨A L·ªñI] H√†m n√†y s·∫Ω duy·ªát qua DOM v√† b·ªçc c√°c k√Ω t·ª± text
         * v√†o th·∫ª <span> m√† kh√¥ng ph√° v·ª° c·∫•u tr√∫c c·ªßa th·∫ª <ruby>.
         */
        function _prepareForSpeech() {
            plainText = '';
            charMap = [];

            function wrapCharsInSpans(parentNode) {
                // T·∫°o b·∫£n sao c·ªßa danh s√°ch node con ƒë·ªÉ duy·ªát, v√¨ ch√∫ng ta s·∫Ω thay ƒë·ªïi DOM tr·ª±c ti·∫øp
                const nodes = Array.from(parentNode.childNodes);

                for (const node of nodes) {
                    // N·∫øu l√† node TEXT v√† kh√¥ng n·∫±m trong th·∫ª <RT> (Furigana)
                    if (node.nodeType === 3 && node.parentNode.nodeName !== 'RT') {
                        const text = node.textContent;
                        const fragment = document.createDocumentFragment();

                        for (const char of text) {
                            plainText += char; // Th√™m k√Ω t·ª± v√†o chu·ªói ƒë·ªÉ ƒë·ªçc
                            const span = document.createElement('span');
                            span.textContent = char;
                            fragment.appendChild(span);
                            charMap.push(span); // Th√™m th·∫ª span v√†o map ƒë·ªÉ highlight
                        }
                        // Thay th·∫ø node text c≈© b·∫±ng c√°c th·∫ª span m·ªõi
                        parentNode.replaceChild(fragment, node);
                    } 
                    // N·∫øu l√† node ELEMENT, ti·∫øp t·ª•c duy·ªát v√†o trong
                    else if (node.nodeType === 1) {
                        wrapCharsInSpans(node);
                    }
                }
            }

            // B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·ª´ th·∫ª cha
            wrapCharsInSpans(targetElement);
        }

        // D·ªçn d·∫πp, tr·∫£ l·∫°i HTML g·ªëc sau khi ƒë·ªçc xong
        function _cleanup() {
            targetElement.innerHTML = originalHTML;
            isPlaying = false;
            isPaused = false;
        }

        function play() {
            // D·ª´ng b·∫•t k·ª≥ tr√¨nh ƒë·ªçc n√†o kh√°c ƒëang ch·∫°y
            if (currentSpeechHandler && currentSpeechHandler !== this) {
                currentSpeechHandler.stop();
            }
            currentSpeechHandler = this;

            if (isPlaying && isPaused) { // N·∫øu ƒëang t·∫°m d·ª´ng -> ti·∫øp t·ª•c
                speechSynthesis.resume();
                isPaused = false;
                if (options.onStateChange) options.onStateChange({ isPlaying: true, isPaused: false });
                return;
            }
            
            if (isPlaying && !isPaused) { // N·∫øu ƒëang ch·∫°y -> t·∫°m d·ª´ng
                speechSynthesis.pause();
                isPaused = true;
                if (options.onStateChange) options.onStateChange({ isPlaying: true, isPaused: true });
                return;
            }
            
            // B·∫Øt ƒë·∫ßu ƒë·ªçc t·ª´ ƒë·∫ßu
            isPlaying = true;
            isPaused = false;
            _prepareForSpeech();
            
            utterance = new SpeechSynthesisUtterance(plainText);
            utterance.lang = 'ja-JP';
            utterance.rate = options.speed || 1;
            
            // T√çCH H·ª¢P: S·ª≠ d·ª•ng voiceManager c√≥ s·∫µn c·ªßa b·∫°n
            utterance.voice = voiceManager.getVoiceFor('default');

            // S·ª± ki·ªán then ch·ªët ƒë·ªÉ highlight
            utterance.onboundary = (event) => {
                if (event.name !== 'word') return;
                charMap.forEach(span => span.classList.remove('highlight-word')); // X√≥a highlight c≈©
                for (let i = 0; i < event.charLength; i++) {
                    const charIndex = event.charIndex + i;
                    if (charMap[charIndex]) {
                        charMap[charIndex].classList.add('highlight-word'); // Highlight t·ª´ m·ªõi
                    }
                }
            };

            // Khi ƒë·ªçc xong
            utterance.onend = () => {
                _cleanup();
                currentSpeechHandler = null;
                if (options.onStateChange) options.onStateChange({ isPlaying: false, isPaused: false });
            };
            
            // Khi c√≥ l·ªói
            utterance.onerror = (event) => {
                console.error('L·ªói SpeechSynthesis:', event);
                _cleanup();
                currentSpeechHandler = null;
                if (options.onStateChange) options.onStateChange({ isPlaying: false, isPaused: false });
            };
            
            speechSynthesis.speak(utterance);
            if (options.onStateChange) options.onStateChange({ isPlaying: true, isPaused: false });
        }

        function stop() {
            if (isPlaying) {
                speechSynthesis.cancel();
                _cleanup();
                currentSpeechHandler = null;
                if (options.onStateChange) options.onStateChange({ isPlaying: false, isPaused: false });
            }
        }
        
        // C·∫≠p nh·∫≠t t·ªëc ƒë·ªô
        function setSpeed(newSpeed) {
            options.speed = newSpeed;
            // N·∫øu ƒëang ƒë·ªçc, d·ª´ng v√† ƒë·ªçc l·∫°i v·ªõi t·ªëc ƒë·ªô m·ªõi
            if (isPlaying && !isPaused) {
                speechSynthesis.cancel();
                // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√£ h·ªßy r·ªìi m·ªõi ƒë·ªçc l·∫°i
                setTimeout(() => play(), 100);
            }
        }
        
        // Tr·∫£ v·ªÅ b·ªô ƒëi·ªÅu khi·ªÉn
        return { play, stop, setSpeed, get isPlaying() { return isPlaying; } };
    }

    /**
     * "B·ªô ƒëi·ªÅu khi·ªÉn" - T√¨m c√°c th√†nh ph·∫ßn ƒë·ªçc hi·ªÉu tr√™n trang v√† g·∫Øn s·ª± ki·ªán cho ch√∫ng.
     */
    function initPassageReading() {
        const passageComponents = document.querySelectorAll('.readable-passage-component');

        passageComponents.forEach((component) => {
            const playBtn = component.querySelector('.play-pause');
            const stopBtn = component.querySelector('.stop');
            const speedBtns = component.querySelectorAll('.speed-btn');
            const textElement = component.querySelector('.text-to-be-read');

            if (!playBtn || !stopBtn || !textElement) return;

            // C·∫•u h√¨nh cho b·ªô n√£o
            const options = {
                speed: 1.0,
                onStateChange: (state) => {
                    if (state.isPlaying && !state.isPaused) {
                        playBtn.innerHTML = '‚è∏Ô∏è T·∫°m d·ª´ng';
                    } else if (state.isPlaying && state.isPaused) {
                        playBtn.innerHTML = '‚ñ∂Ô∏è Ti·∫øp t·ª•c';
                    } else {
                        // Tr·∫£ v·ªÅ tr·∫°ng th√°i "Nghe l·∫°i" khi ƒë·ªçc xong ho·∫∑c d·ª´ng h·∫≥n
                        playBtn.innerHTML = '‚ñ∂Ô∏è Nghe l·∫°i';
                    }
                }
            };
            
            // T·∫°o m·ªôt tr√¨nh x·ª≠ l√Ω ri√™ng cho component n√†y
            const handler = createSpeechHandlerForPassage(textElement, options);
            
            playBtn.addEventListener('click', () => handler.play());
            
            stopBtn.addEventListener('click', () => {
                handler.stop();
                // Reset n√∫t play v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
                playBtn.innerHTML = '‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu';
            });

            speedBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    const newSpeed = parseFloat(btn.dataset.speed);
                    handler.setSpeed(newSpeed); // G·ª≠i t·ªëc ƒë·ªô m·ªõi cho tr√¨nh x·ª≠ l√Ω
                    speedBtns.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                });
            });
        });
    }

    // CU·ªêI C√ôNG: G·ªçi h√†m kh·ªüi t·∫°o n√†y
    initPassageReading();



///////////////////
});